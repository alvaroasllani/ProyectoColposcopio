/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.alvaro.capturadorimagen;

import com.github.sarxos.webcam.Webcam;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.Box;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author aasll
 */
public class CapturadorGUI extends javax.swing.JFrame {

    Webcam webcam;
    Boolean isRunning = false;
    private int imageCounter = 1;

    /**
     * Creates new form CapturadorGUI
     */
    public CapturadorGUI() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);

        Dimension[] customResolutions = new Dimension[]{
            new Dimension(960, 540)
        };
        webcam = Webcam.getDefault();
        webcam.setCustomViewSizes(customResolutions);
        webcam.setViewSize(new Dimension(960, 540));
        webcam.open();
        panelImagenes.setLayout(new FlowLayout(FlowLayout.LEFT));

        // Agregar un WindowListener al JFrame para manejar el evento de cierre
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Llamar al método para eliminar las imágenes al cerrar la ventana
                eliminarImagenes();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnIniciar = new javax.swing.JButton();
        btnDetener = new javax.swing.JButton();
        btnCapturar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        scrollPaneImage = new javax.swing.JScrollPane();
        panelImagenes = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        imageHolder = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnAbrirImagenes = new javax.swing.JButton();
        btnAgrandar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1366, 768));

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btnDetener.setText("Detener");
        btnDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetenerActionPerformed(evt);
            }
        });

        btnCapturar.setText("Capturar");
        btnCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapturarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        scrollPaneImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scrollPaneImage.setAutoscrolls(true);

        javax.swing.GroupLayout panelImagenesLayout = new javax.swing.GroupLayout(panelImagenes);
        panelImagenes.setLayout(panelImagenesLayout);
        panelImagenesLayout.setHorizontalGroup(
            panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
        panelImagenesLayout.setVerticalGroup(
            panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        scrollPaneImage.setViewportView(panelImagenes);

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnAbrirImagenes.setText("Abrir Imagenes");
        btnAbrirImagenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirImagenesActionPerformed(evt);
            }
        });

        btnAgrandar.setText("Agrandar");
        btnAgrandar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgrandarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollPaneImage, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDetener, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107)
                .addComponent(btnCapturar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAbrirImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgrandar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPaneImage, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDetener, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCapturar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAbrirImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgrandar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:
        if (isRunning) {
            isRunning = false;
            webcam.close();
        }

        // Iniciar la cámara nuevamente
        webcam.open();

        // Iniciar el hilo para tomar el video
        if (!isRunning) {
            isRunning = true;
            new VideoFeedTaker().start();
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetenerActionPerformed
        // TODO add your handling code here:
        isRunning = false;
        webcam.close();
        imageHolder.setIcon(null);
    }//GEN-LAST:event_btnDetenerActionPerformed

    private void btnCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCapturarActionPerformed
        // TODO add your handling code here:
        try {
            // Ubicación y nombre de archivo predeterminados
            String fileName = "img" + imageCounter + ".png";
            File fileToSave = new File("C:\\Users\\aasll\\Desktop\\ProyectoColposcopia\\CapturadorImagen\\src\\thumbnails", fileName);

            Image image = webcam.getImage();

            // Obtener el ancho del panel donde se insertan las imágenes
            int panelWidth = panelImagenes.getWidth();

            // Establecer una altura fija para las miniaturas
            int thumbnailHeight = 100; // Puedes ajustar esta altura según tus necesidades

            // Calcular el ancho proporcional para mantener la relación de aspecto
            int thumbnailWidth = (int) (image.getWidth(null) * ((double) thumbnailHeight / image.getHeight(null)));

            // Si el ancho calculado es mayor que el ancho del panel, ajustarlo al ancho del panel
            if (thumbnailWidth > panelWidth) {
                thumbnailWidth = panelWidth;
                thumbnailHeight = (int) (image.getHeight(null) * ((double) thumbnailWidth / image.getWidth(null)));
            }

            // Crear una miniatura de la imagen con el ancho y altura calculados
            ImageIcon thumbnail = new ImageIcon(image.getScaledInstance(thumbnailWidth, thumbnailHeight, Image.SCALE_SMOOTH));

            ImageIO.write((BufferedImage) image, "PNG", fileToSave);

            // Crear un espacio vertical entre las miniaturas
            panelImagenes.add(Box.createVerticalStrut(10));

            // Crear un JLabel para la miniatura
            JLabel thumbnailLabel = new JLabel(thumbnail);

            // Crear un JCheckBox para la miniatura
            JCheckBox checkBox = new JCheckBox();
            checkBox.addActionListener((ActionEvent e) -> {
                // Manejar el evento de selección/deselección del JCheckBox aquí
                if (checkBox.isSelected()) {
                    thumbnailLabel.setBorder(BorderFactory.createLineBorder(Color.RED));
                } else {
                    thumbnailLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                }
            });

            // Agregar un MouseListener a la miniatura para manejar clics
            thumbnailLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    checkBox.setSelected(!checkBox.isSelected());
                    if (checkBox.isSelected()) {
                        thumbnailLabel.setBorder(BorderFactory.createLineBorder(Color.RED));
                    } else {
                        thumbnailLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                    }
                }
            });

            // Configurar el JPanel con BoxLayout y alineación vertical (solo si no se ha configurado antes)
            if (!(panelImagenes.getLayout() instanceof BoxLayout)) {
                panelImagenes.setLayout(new BoxLayout(panelImagenes, BoxLayout.Y_AXIS));
            }

            // Crear un JPanel para la imagen capturada
            JPanel imagePanel = new JPanel();

            // Agregar el JCheckBox y el JLabel al JPanel
            imagePanel.add(checkBox);
            imagePanel.add(thumbnailLabel);

            // Agregar el JPanel al panelImagenes
            panelImagenes.add(imagePanel);

            // Repintar el panelImagenes para reflejar los cambios
            panelImagenes.revalidate();
            panelImagenes.repaint();

            // Incrementar el contador para la próxima imagen
            imageCounter++;
        } catch (IOException ex) {
            Logger.getLogger(CapturadorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCapturarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        try {
            // Nueva ruta de guardado
            String nuevaRuta = "C:\\Users\\aasll\\Desktop\\ProyectoColposcopia\\CapturadorImagen\\src\\img";

            boolean alMenosUnaSeleccionada = false;  // Variable para rastrear si al menos una imagen está seleccionada

            // Iterar a través de las imágenes capturadas
            for (int i = 1; i < imageCounter; i++) {
                // Obtener la ruta de la imagen original capturada
                String originalImagePath = "C:\\Users\\aasll\\Desktop\\ProyectoColposcopia\\CapturadorImagen\\src\\thumbnails\\img" + i + ".png";

                // Crear un nuevo nombre de archivo para la imagen en la nueva ruta
                String fileName = "ImagenGuardada" + i + ".png";
                File fileToSave = new File(nuevaRuta, fileName);

                // Copiar la imagen a la nueva ubicación
                if (copyImage(originalImagePath, fileToSave)) {
                    alMenosUnaSeleccionada = true;  // Marcar que al menos una imagen está seleccionada
                }
            }

            // Mostrar advertencia si ninguna imagen está seleccionada
            if (!alMenosUnaSeleccionada) {
                JOptionPane.showMessageDialog(this, "Por favor, marque las imágenes que quiere guardar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                // Mostrar mensaje de éxito si al menos una imagen está seleccionada y se han guardado
                JOptionPane.showMessageDialog(this, "Imágenes guardadas con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException ex) {
            Logger.getLogger(CapturadorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAbrirImagenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirImagenesActionPerformed
        // TODO add your handling code here:
        String rutaCarpeta = "C:\\Users\\aasll\\Desktop\\ProyectoColposcopia\\CapturadorImagen\\src\\img";
        abrirCarpeta(rutaCarpeta);
    }//GEN-LAST:event_btnAbrirImagenesActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        eliminarImagenes();
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgrandarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgrandarActionPerformed
        // TODO add your handling code here:
        // Crear una instancia de VisorImagenes y pasar la lista de rutas de imágenes
        VisorImagenes visor = new VisorImagenes(obtenerRutasImagenes());
        visor.setVisible(true);
    }//GEN-LAST:event_btnAgrandarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapturadorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapturadorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapturadorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapturadorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CapturadorGUI().setVisible(true);
            }
        });

    }

    class VideoFeedTaker extends Thread {

        @Override
        public void run() {
            while (true && isRunning) {
                try {
                    Image image = webcam.getImage();
                    imageHolder.setIcon(new ImageIcon(image));
                    Thread.sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CapturadorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    // Método para eliminar las imágenes en la carpeta "thumbnails"
    private void eliminarImagenes() {
        String rutaCarpeta = "C:\\Users\\aasll\\Desktop\\ProyectoColposcopia\\CapturadorImagen\\src\\thumbnails";
        File carpeta = new File(rutaCarpeta);

        // Verificar si la carpeta existe
        if (carpeta.exists() && carpeta.isDirectory()) {
            // Obtener la lista de archivos en la carpeta
            File[] archivos = carpeta.listFiles();

            // Eliminar cada archivo en la carpeta
            if (archivos != null) {
                for (File archivo : archivos) {
                    archivo.delete();
                }
            }
        }
    }
    // Método para abrir una carpeta en el explorador de archivos

    private void abrirCarpeta(String rutaCarpeta) {
        try {
            File carpeta = new File(rutaCarpeta);

            // Verificar si la carpeta existe
            if (carpeta.exists() && carpeta.isDirectory()) {
                Desktop.getDesktop().open(carpeta);
            } else {
                JOptionPane.showMessageDialog(this, "La carpeta no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al abrir la carpeta.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    // Método para copiar una imagen de una ubicación a otra

    private boolean copyImage(String sourcePath, File destinationFile) throws IOException {
        File sourceFile = new File(sourcePath);

        // Verificar si la imagen original existe
        if (sourceFile.exists()) {
            // Copiar la imagen
            Files.copy(sourceFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "La imagen original no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    // Método para obtener las rutas de imágenes capturadas
    private ArrayList<String> obtenerRutasImagenes() {
        ArrayList<String> rutasImagenes = new ArrayList<>();
        for (int i = 1; i < imageCounter; i++) {
            String rutaImagen = "C:\\Users\\aasll\\Desktop\\ProyectoColposcopia\\CapturadorImagen\\src\\thumbnails\\img" + i + ".png";
            rutasImagenes.add(rutaImagen);
        }
        return rutasImagenes;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirImagenes;
    private javax.swing.JButton btnAgrandar;
    private javax.swing.JButton btnCapturar;
    private javax.swing.JButton btnDetener;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel imageHolder;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelImagenes;
    private javax.swing.JScrollPane scrollPaneImage;
    // End of variables declaration//GEN-END:variables
}
